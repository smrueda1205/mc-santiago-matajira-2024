# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ChFX44yI3hI1QmBwFfarX21wSJQ8zck1
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

# Datos de entrada
x = np.array([1, 2, 3, 4, 5, 6, 7])
y = np.array([0.1, 0.3, 0.9, 1.7, 2.8, 4.5, 6.9])

def ecuacion_de_potencias(x, y):
    # Aplicando logaritmos para linealizar la ecuación de potencias
    log_x = np.log(x)
    log_y = np.log(y)

    # Aplicando regresión lineal a los datos linealizados
    A = np.vstack([log_x, np.ones(len(log_x))]).T
    m, c = np.linalg.lstsq(A, log_y, rcond=None)[0]

    # Calculando los parámetros a y b
    a = np.exp(c)
    b = m

    # Coeficiente de determinación (r^2)
    y_pred = a * (x ** b)
    r2 = 1 - np.sum((y - y_pred) ** 2) / np.sum((y - np.mean(y)) ** 2)

    # Coeficiente de correlación (r)
    r = np.sqrt(r2)

    # Desviación estándar (sy)
    sy = np.std(y)

    # Error estándar de la estimación (sεy|x)
    s_epsilon_y_given_x = np.sqrt(np.sum((y - y_pred) ** 2) / (len(x) - 2))

    return a, b, sy, s_epsilon_y_given_x, r2, r

def graficar(x, y, a_potencias, b_potencias):
    # Crear puntos para graficar las curvas ajustadas
    x_values = np.linspace(min(x), max(x), 100)
    y_potencias = a_potencias * (x_values ** b_potencias)

    # Graficar puntos originales y curvas ajustadas
    plt.scatter(x, y, label='Datos Originales')
    plt.plot(x_values, y_potencias, label='Ecuación de Potencias (Mínimos Cuadrados)', linestyle='--')

    plt.xlabel('x')
    plt.ylabel('y')
    plt.title('Ajuste de Curvas con Ecuación de Potencias')
    plt.legend()
    plt.grid(True)
    plt.show()

# Calcular parámetros para la ecuación de potencias
a_potencias, b_potencias, sy, s_epsilon_y_given_x, r2, r = ecuacion_de_potencias(x, y)

# Mostrar resultados
print("Parámetros de la ecuación de potencias:")
print(f"a: {a_potencias}, b: {b_potencias}")
print("Desviación estándar (sy):", sy)
print("Error estándar de la estimación (sεy|x):", s_epsilon_y_given_x)
print("Coeficiente de determinación (r^2):", r2)
print("Coeficiente de correlación (r):", r)

# Graficar los resultados
graficar(x, y, a_potencias, b_potencias)