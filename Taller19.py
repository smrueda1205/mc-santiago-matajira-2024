# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xoWbKwfFArL97VYbGgIKW0cSYc9IpgzS
"""

import numpy as np
import matplotlib.pyplot as plt

# Función para la regresión lineal de potencia
def regresion_potencia(x, y):
    logx = np.log(x)
    logy = np.log(y)

    m, b = np.polyfit(logx, logy, 1)
    a = np.exp(b)
    return a, m

# Función para la regresión lineal de razón de crecimiento
def regresion_crecimiento(x, y):
    x = np.array(x)
    y = np.array(y)

    b, a = np.polyfit(x, np.log(y), 1)
    return np.exp(a), b

# Datos
x = np.array([1, 2, 3, 4, 5, 6, 7, 8])
y = np.array([4.3, 6.5, 7.5, 8, 8.5, 8.8, 9, 9.5])

# Regresión de potencia
a1, b1 = regresion_potencia(x, y)
y_potencia = a1 * x ** b1

# Regresión de razón de crecimiento
a2, b2 = regresion_crecimiento(x, y)
y_crecimiento = a2 * np.exp(b2 * x)

# Graficar
plt.figure(figsize=(10, 6))

# Datos
plt.scatter(x, y, color='blue', label='Datos')

# Regresión de potencia
plt.plot(x, y_potencia, color='red', label=f'Regresión de Potencia: y = {a1:.2f} * x^{b1:.2f}')

# Regresión de razón de crecimiento
plt.plot(x, y_crecimiento, color='green', label=f'Regresión de Crecimiento: y = {a2:.2f} * e^({b2:.2f} * x)')

plt.title('Regresión Lineal por Mínimos Cuadrados')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)
plt.show()

# Comentario para determinar cuál se ajusta mejor desde una perspectiva visual
if np.mean(np.abs(y_potencia - y)) < np.mean(np.abs(y_crecimiento - y)):
    print("La regresión de potencia se ajusta mejor desde una perspectiva visual.")
else:
    print("La regresión de crecimiento se ajusta mejor desde una perspectiva visual.")