# -*- coding: utf-8 -*-
"""Taller16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11n76XPB-gMlkk580DbYkoAZAWZMeSuYY
"""

import numpy as np

A = np.array([[3, 2, 2],
              [3, 1, -3],
              [1, 0, -2]])

B = np.array([[1, 2, 0, 4],
              [2, 0, -1, -2],
              [1, 1, -1, 0],
              [0, 4, 1, 0]])

def gauss_jordan_inversa(matriz):
    # Creamos una matriz aumentada con la matriz identidad
    aumentada = np.hstack((matriz, np.eye(matriz.shape[0])))

    # Realizamos la eliminación de Gauss-Jordan
    for i in range(aumentada.shape[0]):
        # Escalamos la fila para que el elemento pivote sea 1
        aumentada[i] /= aumentada[i, i]

        # Restamos la fila pivote a las demás filas para anular los elementos debajo del pivote
        for j in range(i + 1, aumentada.shape[0]):
            aumentada[j] -= aumentada[i] * aumentada[j, i]

    # Escalamos las filas para que el elemento pivote sea 1
    for i in range(aumentada.shape[0] - 1, -1, -1):
        for j in range(i + 1, aumentada.shape[0]):
            aumentada[i] -= aumentada[j] * aumentada[i, j]

        aumentada[i] /= aumentada[i, i]

    # La inversa es la mitad derecha de la matriz aumentada
    return aumentada[:, matriz.shape[1]:]

inversa_A = gauss_jordan_inversa(A)
inversa_B = gauss_jordan_inversa(B)

print("Inversa de A:")
print(inversa_A)

print("Inversa de B:")
print(inversa_B)